#! /usr/bin/env python3
# -*- python -*-
# RUN: %{python} %s '%swift_src_root' %existing-swift-features

import json
import pathlib
import re
import subprocess
import sys


# Tests that check for the behaviour of  experimental/upcoming features, so
# they cannot automatically be checked.
EXCEPTIONAL_FILES = [
    # Tests for ParserValidation not being defined in no-asserts compilers
    pathlib.Path("test/Frontend/features/experimental-features-no-asserts.swift"),
    # Tests for UnknownFeature not existing
    pathlib.Path("test/Frontend/features/upcoming_feature.swift"),
    pathlib.Path("test/Frontend/features/strict_features.swift"),
    # Tests for ModuleInterfaceExportAs being ignored
    pathlib.Path("test/ModuleInterface/swift-export-as.swift"),
    # Uses the pseudo-feature AvailabilityMacro=
    pathlib.Path("test/Sema/availability_define.swift"),
    # Tests behavior when you try to use a feature without enabling it
    pathlib.Path("test/attr/feature_requirement.swift"),
    # Tests completion with features both enabled and disabled
    pathlib.Path("test/IDE/complete_decl_attribute_feature_requirement.swift"),
]

ENABLE_FEATURE_RE = re.compile(
    r"-enable-(?:experimental|upcoming)-feature(?:\s+-Xfrontend)?\s*([A-Za-z0-9]*)"
)
FEATURE_LIT_MARKER_RE = re.compile(r"swift_feature_([A-Za-z0-9]*)")


def find_test_files(swift_src_root):
    # Look for every test file in the test directories with `REQUIRES` lines
    # that mention `swift_feature_`.
    # Look for every test file in the test directories with `RUN` lines that
    # mention `-enable-experimental-feature` or `-enable-upcoming-feature`.
    # Be careful to not use RUN or REQUIRES with a colon after them or Lit will
    # pick them up.
    output = subprocess.check_output(
        [
            "grep",
            "--extended-regexp",
            "--recursive",
            "-e",
            "REQUIRES[:].*swift_feature_",
            "-e",
            "RUN[:].*-enable-(experimental|upcoming)-feature",
            "--files-with-matches",
            str(swift_src_root / "test"),
            str(swift_src_root / "validation-test"),
        ],
        text=True,
    )
    return output.splitlines()


def find_run_and_requires_lines(test_file):
    # Be careful to not use RUN or REQUIRES with a colon after them or Lit will
    # pick them up.
    output = subprocess.check_output(
        [
            "grep",
            "--extended-regexp",
            "--no-filename",
            "-e",
            "RUN[:]",
            "-e",
            "REQUIRES[:]",
            test_file,
        ],
        text=True,
    )
    return output.splitlines()


def check_test_file(test_file, existing_swift_features):
    enabled_features = set()
    required_features = set()

    for line in find_run_and_requires_lines(test_file):
        enabled_features.update(feature for feature in ENABLE_FEATURE_RE.findall(line))
        required_features.update(
            feature for feature in FEATURE_LIT_MARKER_RE.findall(line)
        )

    had_error = False

    # First check for unknown features.

    for feature in enabled_features.difference(existing_swift_features):
        enabled_features.remove(feature)

        # Be careful to not use RUN with a colon after it or Lit will pick
        # it up.
        print(
            f"{test_file}: error: unknown feature '{feature}' enabled in 'RUN"
            + ":' line"
        )
        had_error = True

    for feature in required_features.difference(existing_swift_features):
        required_features.remove(feature)

        # Be careful to not use REQUIRES with a colon after it or Lit will pick
        # it up.
        print(
            f"{test_file}: error: unknown feature '{feature}' in 'REQUIRES"
            + f":' line: swift_feature_{feature}"
        )
        had_error = True

    # If the sets are equal, we're fine.
    if enabled_features == required_features:
        return had_error

    # Then check for imbalances between required and enabled features.

    for feature in enabled_features.difference(required_features):
        # Be careful to not use REQUIRES with a colon after it or Lit will pick
        # it up.
        print(
            f"{test_file}: error: file enables '{feature}' but is missing '// REQUIRES"
            + f": swift_feature_{feature}'"
        )
        had_error = True

    for feature in required_features.difference(enabled_features):
        print(
            f"{test_file}: error: file requires 'swift_feature_{feature}' but does not enable '{feature}'"
        )
        had_error = True

    return had_error


def main():
    if len(sys.argv) < 3:
        print("Invalid number of arguments.")
        sys.exit(1)

    swift_src_root = pathlib.Path(sys.argv[1])
    existing_swift_features = set(json.loads(sys.argv[2]))

    had_error = False

    for test_file in find_test_files(swift_src_root):
        # Skip if this is one of the exceptional files.
        if pathlib.Path(test_file).relative_to(swift_src_root) in EXCEPTIONAL_FILES:
            continue

        if check_test_file(test_file, existing_swift_features):
            had_error = True

    if had_error:
        sys.exit(1)


if __name__ == "__main__":
    main()
